image: docker:latest

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - build
  - deploy

before_script:
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_rsa
  - chmod 400 ~/.ssh/id_rsa
#  - ssh-keyscan -p $PORT_PROD $HOSTNAME_PROD >> ~/.ssh/known_hosts
  - ssh-keyscan $HOSTNAME_STAGING_35 >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts


build-master:
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" registry.gitlab.com
  script:
    - docker build  --pull -f docker/app/Dockerfile_build -t $CI_REGISTRY_IMAGE:latest --build-arg PHP_VERSION=7.4 .
    - docker push "$CI_REGISTRY_IMAGE:latest"
  only:
    - master

#test-master:
#  image: registry.gitlab.com/flagstudio/laraflag:php-7.4-base-debian-node-12
#  stage: build
#  only:
#    - master
#    - tags
#  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
#  script:
#    - pecl install xdebug-2.9.8
#    - docker-php-ext-enable xdebug
#    - cp ./docker/app/xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini
#    - composer i
#    - vendor/bin/phpunit  --testdox --coverage-text --colors=never --configuration  phpunit.xml

#deploy-master:
#  stage: deploy
#  only:
#    - master
#  script:
#    - scp -P $PORT_PROD docker/ssl/Caddyfile_SSL $USER_PROD@$HOSTNAME_PROD:$PATH_PROD/
#    - scp -P $PORT_PROD docker/netdata $USER_PROD@$HOSTNAME_PROD:$PATH_PROD/
#    - scp -P $PORT_PROD docker-compose.prod.yml $USER_PROD@$HOSTNAME_PROD:$PATH_PROD/docker-compose.yml
#    - scp -P $PORT_PROD .env.example $USER_PROD@$HOSTNAME_PROD:$PATH_PROD/.env.example
#    - ssh -T $USER_PROD@$HOSTNAME_PROD -p $PORT_PROD "cd $PATH_PROD &&
#      sudo docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" registry.gitlab.com &&
#      sudo docker pull $CI_REGISTRY_IMAGE:latest &&
#      sudo docker-compose up --remove-orphans -d app &&
#      sudo docker-compose exec -T app php artisan migrate --force &&
#      sudo docker-compose exec -T app php artisan route:clear &&
#      sudo docker  image prune --force &&
#      sudo chmod -R 777 storage/"
#


deploy-develop:
  stage: deploy
  only:
    - develop
  script:
    - ssh -T root@$HOSTNAME_STAGING_35 "cd $PATH_STAGING_35 &&
      php artisan down --message=\"We are in deploying process. Please wait for a minute...\" &&
      git stash &&
      git checkout develop &&
      git fetch gitlab develop &&
      git reset --hard gitlab/develop &&
      npm run dev &&
      composer install -q &&
      php artisan migrate --force &&
      php artisan view:clear &&
      chmod -R 777 storage/ bootstrap/ .env &&
      chown -R dev:dev . &&
      sed -i 's/GIT_COMMIT=.*/GIT_COMMIT=\""$CI_COMMIT_MESSAGE"\"/' .env &&
      sed -i 's/GIT_BRANCH=.*/GIT_BRANCH=\""$CI_COMMIT_BRANCH"\"/' .env &&
      sed -i 's/GIT_DATE=.*/GIT_DATE=\""$CI_COMMIT_TIMESTAMP"\"/' .env &&
      php artisan up"
